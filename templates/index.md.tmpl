# Axual Provider

Axual Provider allows using Axual's Self-Service for Apache Kafka functionality within Terraform configurations.

## Axual Self Service
- Self Service allows fine-grained access control over your applications and streams, who is accessing your streams and for what purpose.
- Self Service displays valuable metadata about streams and the applications interacting with them, such as:
	- The format of the data thatâ€™s present on the stream
	- How long until the data is removed from the stream
	- Which applications are the producers and the consumers of this data
- Self Service provides control your stream (topic) properties for individual environments, and get an overview of the streaming landscape inside your organization.
	- For details, please refer to Axual Self-Service reference documentation: https://docs.axual.io/axual/2022.2/self-service/index.html

## Features

- User/group management
- Stream and application management
- Security
	- To secure which applications are authorised to access streams, we support
		- SSL (MUTUAL TLS) as a Certificate(PEM)
		- SASL (OAUTHBEARER) as a Custom Principal that specifies the ID referenced in URI and tokens. For example, 'my-client'

## Limitations
- **The environment that user creates needs to have this setting: Authorization issuer-Auto**
  - Manual approval will be supported in later version of Axual Terraform Provider.

# Getting started

## Axual Trial setup

- First please request a trial environment by filling in the form https://axual.com/trial/
- Please confirm your e-mail
- You will receive an e-mail with trial credentials
- Please fill in provider like this:

```shell
terraform {
  required_providers {
    axual = {
      source = "Axual/axual"
      version = "1.0.0"
    }
  }
}
 provider "axual" {
   apiurl   = "https://selfservice.axual.cloud/api"
   realm    = "<REPLACE_WITH_REALM> " # Replace realm with the realm from the URL in the email you received: https://selfservice.axual.cloud/login/<REPLACE_WITH_REALM>
   username = "<REPLACE_WITH_USERNAME>"
   password = "<REPLACE_WITH_PASSWORD>"
   clientid = "self-service"
   authurl = "https://selfservice.axual.cloud/auth/realms/<REPLACE_WITH_REALM>/protocol/openid-connect/token" # Replace realm with the realm from the URL in the email you received: https://selfservice.axual.cloud/login/<REPLACE_WITH_REALM>
   scopes = ["openid", "profile", "email"]
 }
```
- Next, let's test if everything works:
```shell
terraform init
```
- Next, we can either import User and Group or hardcode user and group UID-s in other resources

### Importing user and group

- To import, please go to user page and replace these values:
```shell
resource "axual_user" "gitops_user" {
  first_name    = "<REPLACE WITH FIRST NAME>"
  last_name     = "<REPLACE WITH LAST NAME>"
  email_address = "<REPLACE WITH EMAIL>"
  roles         = [
    { name = "STREAM_ADMIN" },
    { name = "APPLICATION_ADMIN" },
    { name = "ENVIRONMENT_ADMIN" },
  ]
}
resource "axual_group" "gitops_group" {
 name          = "default"
 members       = [
   axual_user.gitops_user.id,
 ]
}
```
- Then on user page we can look at user and group UID-s from network tab:
	- Request to https://selfservice.axual.cloud/api/group contains the group UID
	- Request to https://selfservice.axual.cloud/api/user contains the user UID

- Now we can import user and group:

```shell
terraform import axual_user.gitops_user <USER_UID>
terraform import axual_group.gitops_group <GROUP_UID>
```

### Hardcoded values
- To use hardcoded values, we replace group UID for owners value in other resources, for example:
```shell
resource "axual_stream" "gitops_test_stream2" {
 name = "gitops_test_stream2"
 key_type = "String"
 value_type = "String"
 owners = "221771776652211ea556db870b084631"
 retention_policy = "delete"
 properties = { }
}
```
<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `apiurl` (String) URL that will be used by the client for all resource requests
- `authurl` (String) Token url
- `clientid` (String) Client ID to be used for oauth
- `password` (String, Sensitive) Password belonging to the user
- `realm` (String) Axual realm used for the requests
- `username` (String) Username for all requests. Will be used to acquire a token

### Optional
- `scopes` (List of String) OAuth authorization server scopes

For example:

{{ tffile "examples/axual/00_provider.tf" }}
