# Axual Provider

Axual Provider allows using Axual's Self-Service for Apache Kafka functionality within Terraform configurations.

## Axual Self Service
- Self Service allows fine-grained access control over your applications and topics, who is accessing your topics and for what purpose.
- Self Service displays valuable metadata about topics and the applications interacting with them, such as:
	- The format of the data thatâ€™s present on the topic
	- How long until the data is removed from the topic
	- Which applications are the producers and the consumers of this data
- Self Service provides control of your topic properties for individual environments and get an overview of the streaming landscape inside your organization.
	- For details, please refer to Axual Self-Service reference documentation: https://docs.axual.io/axual/2023.2/self-service/index.html

## Features

- User/group management
- Topic and application management
- Security
	- To secure which applications are authorised to access topics, we support
		- SSL (MUTUAL TLS) as a Certificate(PEM)
		- SASL (OAUTHBEARER) as a Custom Principal that specifies the ID referenced in URI and tokens. For example, 'my-client'
- Environment management
- Request, Approval, Revocation, Rejection and Cancellation of Access Requests
## Limitations
- Currently, there is a bug that deleting a resource that is managed by Terraform from UI results in Terraform not being able to recreate the resource again according to .tf configuration file. We do not recommend currently deleting resources managed by Terraform from UI. This bug has been reported to development team and is under investigation.
- Public environments cannot be deleted, private environments can be deleted. This feature will be implemented in the future.
- When deleting all resources at once, application.tf needs to have a dependency to make sure topic and topic_config get deleted first. This bug has been reported to development team and is under investigation.

# Getting started
## Required User Roles
- The Terraform User who is logged in(Default username kubernetes@axual.com), needs to have both of the following user roles:
  - **APPLICATION_ADMIN** - for creating application principal resource(axual_application_principal) and for create access request()
  - **STREAM_ADMIN** - for revoking access request
- Alternatively, they can be the owner of both the application and the topic, which entails being a user in the same group as the owner group of the application and topic.
## Example Usage

First, make sure to define and configure the provider:

{{ tffile "examples/axual/provider.tf" }}

Next, take a look at the *full* example which shows you the capabilities of the TerraForm Provider for Axual:

{{ tffile "examples/axual/main.tf" }}

<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `apiurl` (String) URL that will be used by the client for all resource requests
- `authurl` (String) Token url
- `clientid` (String) Client ID to be used for oauth
- `password` (String, Sensitive) Password belonging to the user
- `realm` (String) Axual realm used for the requests
- `username` (String) Username for all requests. Will be used to acquire a token

### Optional
- `scopes` (List of String) OAuth authorization server scopes

## Guides

- Our guides are in the guides folder:
	- How to import user and group: [Importing user and group](guides/importing-user-and-groups.md)
	- Setting up Terraform with Axual Trial: [Axual Trial setup](guides/axual-trial-setup.md)
	- Managing application access to topics: [Axual Trial setup](guides/manage-application-access-to-topics.md)


## Compatibility
 - This terraform provider requires Management API 7.0.7

## Output
Please include output if you want to have detailed information, e.g. for debugging purposes or for data sources.
Example of an output for the environment resource.

```
output "staging_id" {
	value = axual_environment.staging.id
  }
  
  output "staging_name" {
	value = axual_environment.staging.name
  }
```