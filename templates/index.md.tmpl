# Axual Provider

The Axual Terraform Provider integrates Axual's Self-Service for Apache Kafka with Terraform, simplifying the management of Kafka configurations as code. It provides detailed access control, clear visibility into topic information, and easy management of topic settings, enabling users to effectively monitor and control their Kafka streaming setup. The provider supports distinct team roles: the Admin Team manages environments, user groups, and authentication; the Topic Team handles topic creation, configuration, and access approvals; and the Application Team manages applications, deployments, and access requests. These capabilities enable a GitOps workflow where teams manage their Terraform states independently and collaborate through resource references and approvals.. Learn more about Axual Self-Service: https://docs.axual.io/axual/2024.4/self-service/index.html

## Example Usage

First, make sure to configure the connection. Please note that we currently only support Keycloak authentication provider. Auth0 authentication provider will be supported soon:

{{ tffile "examples/axual/provider.tf" }}

The following example demonstrates the basic functionality of Axual Self-Service. For more advanced features, refer to the 'Resources' and 'Guides' sections.

{{ tffile "examples/axual/main.tf" }}

To create all the resources in this example, the logged-in user (defined in provider.tf) must have the following roles:

- **TENANT_ADMIN** - Required for creating the resources `axual_user` and `axual_group`
- **STREAM_ADMIN** - for creating resources: `axual_topic`, `axual_topic_config`, `axual_application_access_grant_approval`
- **APPLICATION_ADMIN** - for creating resources: `axual_application`, `axual_application_principal`, `axual_application_access_grant`
- **ENVIRONMENT_ADMIN** - for creating resource: `axual_environment`

## Distributed Gitops multi-repo flow with 3 separate teams: [Multi-Repo Guide](guides/multi-repo.md)
- Please follow the guide for a setup where 3 teams have separated responsibilities.

1. **Application Team**: Requests permissions to produce to or consume from a topic owned by the Topic Team.
![Alt text](distributed_gitops_flow.png)
2. **Topic Team**: Approves or rejects application access requests to their topics.
3. **Admin Team**: Manages user groups and environments in Self-Service.

**Key Practices**:
- Each team manages its own Terraform state independently.
- Teams utilize dedicated Terraform users configured with the minimum required privileges.
- Teams reference resources from other teams by utilizing Terraform data sources.

# Getting started
## Required User Roles
- The Terraform User who is logged in, needs to have at least both of the following user roles:
  - **APPLICATION_ADMIN** - for creating `axual_application`, `axual_application_principal`, `axual_application`
  - **STREAM_ADMIN** - for revoking access request
- Alternatively, they can be the owner of both the application and the topic, which entails being a user in the same group as the owner group of the application and topic.


## Compatibility
| Terraform Provider Version | Supported Platform Manager Version(s) |
|----------------------------|---------------------------------------|
| 2.1.x                      | 7.0.7 - 8.4.x                        |
| 2.2.x                      | 8.5.x                                |
| 2.3.x                      | 8.5.x                                |
| 2.4.x                      | 8.6.x                                |
| 2.5.x                      | 9.1.x                                |
