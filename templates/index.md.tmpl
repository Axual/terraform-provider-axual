# Axual Provider

The Axual Terraform Provider integrates Axual's Self-Service for Apache Kafka with Terraform, making it easy to manage Axual's Kafka configurations as code. It offers detailed access control, clear topic visibility, and simple topic settings management, enabling users to monitor and control their Kafka streaming setup effectively.

The provider supports distinct team roles. The Admin Team manages environments, users and groups. The Topic Team handles topic creation, configuration, and access approvals. The Application Team manages applications, deployments, and creating access requests. These capabilities enable a GitOps workflow where teams manage their Terraform states independently and collaborate through resource references using Terraform data sources and approvals.

Learn more about Axual Self-Service: https://docs.axual.io/axual/2024.4/self-service/index.html

## Example Usage

First, make sure to configure the connection. Please note that we currently only support Keycloak authentication provider. Auth0 authentication provider will be supported soon:

{{ tffile "examples/axual/provider.tf" }}

The following example demonstrates the basic functionality of Axual Self-Service. For more advanced features, refer to the 'Resources' and 'Guides' sections.

{{ tffile "examples/axual/main.tf" }}

To create all the resources in this example, the logged-in user (defined in provider.tf and imported using `terraform import`) must have the following roles:

- **TENANT_ADMIN** - Required for creating the resources `axual_user` and `axual_group`
- **SCHEMA_AUTHOR** - for creating resource: `axual_schema_version`
- **STREAM_AUTHOR** - for creating resources: `axual_topic`, `axual_topic_config`, `axual_application_access_grant_approval`
- **APPLICATION_AUTHOR** - for creating resources: `axual_application`, `axual_application_principal`, `axual_application_access_grant`
- **ENVIRONMENT_AUTHOR** - for creating resource: `axual_environment`

## Distributed Gitops multi-repo example
- The Guide: [Multi-Repo Guide](guides/multi-repo.md)
- Please follow the guide for a setup where 3 teams have separated responsibilities.

1. **Application Team**: Requests permissions to produce to or consume from a topic owned by the Topic Team.
2. **Topic Team**: Approves or rejects application access requests to their topics.
3. **Admin Team**: Manages users, groups and environments in Self-Service.

**Key Practices**
- Each team manages their own Terraform state independently.
- Teams utilize dedicated Terraform users configured with the minimum required privileges.
- Teams reference resources from other teams by utilizing Terraform data sources.

## Compatibility
| Terraform Provider Version | Supported Platform Manager Version(s) |
|----------------------------|---------------------------------------|
| 2.1.x                      | 7.0.7 - 8.4.x                        |
| 2.2.x                      | 8.5.x                                |
| 2.3.x                      | 8.5.x                                |
| 2.4.x                      | 8.6.x                                |
| 2.5.x                      | 9.1.x                                |
