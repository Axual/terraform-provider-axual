# Axual Provider

Axual Provider allows using Axual's Self-Service for Apache Kafka functionality within Terraform configurations.

## Axual Self Service
- Self Service allows fine-grained access control over your applications and streams, who is accessing your streams and for what purpose.
- Self Service displays valuable metadata about streams and the applications interacting with them, such as:
	- The format of the data thatâ€™s present on the stream
	- How long until the data is removed from the stream
	- Which applications are the producers and the consumers of this data
- Self Service provides control your stream (topic) properties for individual environments, and get an overview of the streaming landscape inside your organization.
	- For details, please refer to Axual Self-Service reference documentation: https://docs.axual.io/axual/2022.2/self-service/index.html

## Features

- User/group management
- Stream and application management
- Security
	- To secure which applications are authorised to access streams, we support
		- SSL (MUTUAL TLS) as a Certificate(PEM)
		- SASL (OAUTHBEARER) as a Custom Principal that specifies the ID referenced in URI and tokens. For example, 'my-client'
- Environment management
- Request, Approval, Revocation, Rejection and Cancellation of Access Requests
## Limitations
- As of 2023.1 release **Stream is renamed to Topic in Self-Service UI**. Stream remains unchanged in Platform API. Therefore, the Axual Terraform Provider will continue to use Stream in the API.
- Currently, there is a bug that deleting a resource that is managed by Terraform from UI results in Terraform not being able to recreate the resource again according to .tf configuration file. We do not recommend currently deleting resources managed by Terraform. This bug in API is about to be fixed.
- Public environments cannot be deleted, private environments can be deleted.

# Getting started
## Required User Roles
- The Terraform User who is logged in(Default username kubernetes@axual.com), needs to have both of the following user roles:
  - **application admin** - for creating application principal resource(axual_application_principal) and for create access request()
  - **stream admin** - for revoking access request
- Alternatively, they can be the owner of both the application and the stream, which entails being a user in the same group as the owner group of the application and stream.
## Example Usage

{{ tffile "examples/axual/00_provider.tf" }}


<!-- schema generated by tfplugindocs -->
## Schema

### Required

- `apiurl` (String) URL that will be used by the client for all resource requests
- `authurl` (String) Token url
- `clientid` (String) Client ID to be used for oauth
- `password` (String, Sensitive) Password belonging to the user
- `realm` (String) Axual realm used for the requests
- `username` (String) Username for all requests. Will be used to acquire a token

### Optional
- `scopes` (List of String) OAuth authorization server scopes

## Guides

- Our guides are in the guides folder:
	- How to import user and group: [Importing user and group](guides/importing-user-and-groups.md)
	- Setting up Terraform with Axual Trial: [Axual Trial setup](guides/axual-trial-setup.md)
	- Managing application access to streams: [Axual Trial setup](guides/manage-application-access-to-streams.md)


## Compatibility
 - This terraform provider requires Management API 7.1.1+

## Outputs
Include outputs if you want to have detailed information, e.g. for debugging purposes or as data sources to another workspace.
This is typically done in the `outpts.tf`` file
This is an example of the outputs for an environment created in the examples folder."

```
output "staging_id" {
	value = axual_environment.staging.id
  }
  
  output "staging_name" {
	value = axual_environment.staging.name
  }
```