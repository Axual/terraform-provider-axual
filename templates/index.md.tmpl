# Axual Provider
The **Axual Terraform Provider** integrates Axual's Self-Service for Apache Kafka with Terraform, making it easy to manage Kafka configurations as code. It provides:

- Fine-grained access control
- Controlling access to and visibility of topics using Kafka ACLs
- Simplified configuration management

This empowers teams to monitor, manage, and automate their Kafka streaming environments efficiently.

Learn more: [Axual Self-Service Documentation](https://docs.axual.io/axual/2025.1/self-service/index.html)

## Example Usage

### Step 1 – Initialize the provider

Create a file named `provider.tf` and paste the following block. Be sure to replace the placeholder values with your actual credentials and configuration.

```hcl
terraform {
  required_providers {
    axual = {
      source  = "axual/axual"
      version = "<Replace with latest version>"
    }
  }
}

provider "axual" {
  # Default `authMode` is "keycloak", if omitted.
  authmode = "keycloak"
  # URL that will be used by the client for all resource requests
  apiurl   = "https://axual.cloud/api"
  # Axual realm used for the requests
  realm    = "PLEASE_CHANGE_TENANT_NAME"
  # Username for all requests. Will be used to acquire a token. It can be omitted if the environment variable AXUAL_AUTH_USERNAME is used.
  username = "PLEASE_CHANGE_USERNAME"
  # (Sensitive) Password belonging to the user. It can be omitted if the environment variable AXUAL_AUTH_PASSWORD is used.
  password = "PLEASE_CHANGE_PASSWORD"
  # Client ID to be used for OAUTH
  clientid = "self-service"
  # Token url
  authurl  = "https://axual.cloud/auth/realms/PLEASE_CHANGE_TENANT_NAME/protocol/openid-connect/token"
  # OAuth authorization server scopes
  scopes   = ["openid", "profile", "email"]
}
```

### Step 2 – Define Resources

Before using the provider:

- Ensure users are created in both Axual Self-Service and the authentication system.
- Use the `axual_user` data source to reference yourself.
- Use the `axual_instance` data source to reference existing clusters.

#### Full Example
- The following example demonstrates the basic functionality of Axual Self-Service. For more advanced features, refer to the 'Resources' and 'Guides' sections.
```hcl

{{ tffile "examples/axual/main.tf" }}


Once set up, run:

```
terraform apply
```

This will:

- Create your group and development environment
- Register the application and principal
- Deploy a topic and ACL
- Approve application access


#### Required Roles

To run the above configuration, your user must have the following roles:

| Role               | Required For                                   |
|--------------------|------------------------------------------------|
| `TENANT_ADMIN`     | `axual_user`, `axual_group`                    |
| `SCHEMA_AUTHOR`    | `axual_schema_version`                         |
| `STREAM_AUTHOR`    | `axual_topic`, `axual_topic_config`, `axual_application_access_grant_approval` |
| `APPLICATION_AUTHOR` | `axual_application`, `axual_application_principal`, `axual_application_access_grant` |
| `ENVIRONMENT_AUTHOR` | `axual_environment`                          |

### Step 3 - Verify & Continue
- Go to `/overview` in Axual Self-Service UI to confirm the application is producing to the topic.
- Connect any Kafka client (e.g. Java) using the created certificate or credentials.
- Terraform will store sensitive values(credentials) in the `terraform.tfstate` file—ensure it's secured.

## GitOps: Multi-Repo Architecture

The Axual Terraform provider enables a distributed GitOps setup across teams:

| Team         | Responsibilities                                   |
|--------------|----------------------------------------------------|
| Admin Team   | Manages users, groups, environments                |
| Topic Team   | Owns topics and defines access policies            |
| App Team     | Deploys applications and requests topic access     |

[See Guide: Multi-Repo GitOps Setup](guides/multi-repo.md)

**Best Practices:**

- Each team manages its own Terraform state
- Teams use minimum-permission service users
- Resources are shared via data sources

##  Limitations
- Terraform-created users are **not** added to the authentication system (e.g. Keycloak), and cannot log in.
  - Instead, use `data.axual_user` to reference existing users
  - Or import them: [`terraform import`](https://registry.terraform.io/providers/Axual/axual/latest/docs/resources/user#import)

## Compatibility
| Terraform Provider Version | Supported Platform Manager Versions |
|----------------------------|---------------------------------------|
| 2.1.x                      | 7.0.7 - 8.4.x                        |
| 2.2.x                      | 8.5.x                                |
| 2.3.x                      | 8.5.x                                |
| 2.4.x                      | 8.6.x – 9.0.x                        |
| 2.5.x                      | 9.1.x                                |

## Custom JSON Schema Support

Enable IDE integration for Terraform auto-complete and validation by importing the provider’s custom JSON schema:

[Custom JSON Schema Guide](guides/json-schema)